#!/bin/bash

# This script runs the network feature extraction process for two datasets:
# PhiUSIIL and Mendeley.
# It finds the latest input file for each dataset in the specified input directory
# and runs the Python extraction script, saving the output to the output directory.
# Output filenames are generated by prepending "network_features_" to the input filename.

set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
INPUT_DIR="/home/ubuntu/lexical_features"
OUTPUT_DIR="/home/ubuntu/network_data_with_lexical_features"
PYTHON_SCRIPT="/home/ubuntu/network_feature_extractor.py"

# --- Ensure directories and script exist ---
if [ ! -d "$INPUT_DIR" ]; then
    echo "Error: Input directory '$INPUT_DIR' not found." >&2
    # As this is a sandbox, let's create a dummy input dir and files for demonstration
    echo "Creating dummy input directory and files for demonstration..."
    mkdir -p "$INPUT_DIR"
    touch "$INPUT_DIR/dummy_20250601_PhiUSIIL_cleaned_v2.csv"
    touch "$INPUT_DIR/dummy_20250602_PhiUSIIL_cleaned_v2.csv"
    touch "$INPUT_DIR/dummy_20250601_Mendeley_cleaned_v2.csv"
    touch "$INPUT_DIR/dummy_20250603_Mendeley_cleaned_v2.csv"
    echo "Please replace dummy files with your actual data in $INPUT_DIR."
    # exit 1 # Original behavior would be to exit
fi

if [ ! -d "$OUTPUT_DIR" ]; then
    echo "Error: Output directory '$OUTPUT_DIR' not found." >&2
    exit 1
fi

if [ ! -f "$PYTHON_SCRIPT" ]; then
    echo "Error: Python script '$PYTHON_SCRIPT' not found." >&2
    exit 1
fi

# --- Function to find the latest file ---
find_latest_file() {
    local pattern="$1"
    local dir="$2"
    # Use find with printf to get modification time (seconds since epoch) and filename,
    # separated by a space. Sort numerically by time, take the last line (latest),
    # and cut from the first space onwards (field 2 to end) to get the filename.
    # Handles filenames with spaces correctly.
    find "$dir" -maxdepth 1 -name "$pattern" -printf '%T@ %p\n' | sort -n | tail -n 1 | cut -d' ' -f2-
}

# --- Process PhiUSIIL Dataset ---
echo "Processing PhiUSIIL dataset..."
LATEST_PHIUSIIL_FILE=$(find_latest_file "*PhiUSIIL_cleaned_v2.csv" "$INPUT_DIR")

if [ -z "$LATEST_PHIUSIIL_FILE" ]; then
    echo "Warning: No file matching '*PhiUSIIL_cleaned_v2.csv' found in $INPUT_DIR. Skipping." >&2
else
    INPUT_BASENAME=$(basename "$LATEST_PHIUSIIL_FILE")
    OUTPUT_PHIUSIIL_FILE="$OUTPUT_DIR/network_features_${INPUT_BASENAME}"
    echo "Found latest PhiUSIIL file: $LATEST_PHIUSIIL_FILE"
    echo "Running extraction for PhiUSIIL... Output: $OUTPUT_PHIUSIIL_FILE"
    python3.11 "$PYTHON_SCRIPT" --input-file "$LATEST_PHIUSIIL_FILE" --output-file "$OUTPUT_PHIUSIIL_FILE"
    echo "PhiUSIIL processing finished."
fi

# --- Process Mendeley Dataset ---
echo "Processing Mendeley dataset..."
LATEST_MENDELEY_FILE=$(find_latest_file "*Mendeley_cleaned_v2.csv" "$INPUT_DIR")

if [ -z "$LATEST_MENDELEY_FILE" ]; then
    echo "Warning: No file matching '*Mendeley_cleaned_v2.csv' found in $INPUT_DIR. Skipping." >&2
else
    INPUT_BASENAME=$(basename "$LATEST_MENDELEY_FILE")
    OUTPUT_MENDELEY_FILE="$OUTPUT_DIR/network_features_${INPUT_BASENAME}"
    echo "Found latest Mendeley file: $LATEST_MENDELEY_FILE"
    echo "Running extraction for Mendeley... Output: $OUTPUT_MENDELEY_FILE"
    python3.11 "$PYTHON_SCRIPT" --input-file "$LATEST_MENDELEY_FILE" --output-file "$OUTPUT_MENDELEY_FILE"
    echo "Mendeley processing finished."
fi

echo "All processing complete."
