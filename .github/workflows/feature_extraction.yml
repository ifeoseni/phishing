name: Stage 1 Feature Extraction To Get HTTP Status Code
on:
  schedule:
    - cron: "1 22 * * *" # 22:30 UTC = 23:30 Lagos (WAT)
  workflow_dispatch:
jobs:
  extract-features:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MTECH }}
          fetch-depth: 0 # Fetch full history to avoid issues
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Verify aiohttp installation (debug)
        run: |
          pip show aiohttp || (echo "aiohttp not installed!" && exit 1)
      - name: Create HTTP Status Output Directory
        run: mkdir -p http_status
      - name: Run HTTP Status for PhiUSIIL Cleaned Data
        run: |
          python http_status_checker.py --input-file cleaned_data/PhiUSIIL_cleaned_v2.csv --output-dir http_status
        continue-on-error: true
      - name: Run HTTP Status for Mendeley Cleaned Data
        run: |
          python http_status_checker.py --input-file cleaned_data/Mendeley_cleaned_v2.csv --output-dir http_status
        continue-on-error: true
      - name: Upload HTTP Status Features
        uses: actions/upload-artifact@v4
        with:
          name: http_status_features
          path: http_status/
          if-no-files-found: warn
      - name: Commit and push HTTP Status feature files
        run: |
          git config user.name "Ifeoluwa Oseni"
          git config user.email "ifeoseni@gmail.com"

          # Pull latest changes first to avoid conflicts
          git pull origin main --rebase || git pull origin main

          # Add files if they exist
          if [ -d "http_status/" ] && [ "$(ls -A http_status/)" ]; then
            git add http_status/
            if ! git diff --cached --quiet; then
              git commit -m "Auto-update: HTTP status feature extraction - $(date '+%Y-%m-%d %H:%M:%S')"
              
              # Retry push with pull if it fails
              git push origin main || {
                echo "Push failed, pulling and retrying..."
                git pull origin main --rebase
                git push origin main
              }
            else
              echo "No changes to commit for HTTP status features"
            fi
          else
            echo "No HTTP status files to commit"
          fi
      - name: Verify HTTP Status files exist
        run: |
          if [ ! -d "http_status" ] || [ -z "$(ls -A http_status/*.csv 2>/dev/null)" ]; then
            echo "Error: No HTTP status CSV files found!"
            exit 1
          fi
          echo "HTTP status files found:"
          ls -la http_status/*.csv

      # - name: Run Lexical Feature Extraction
      #   run: |
      #     # Ensure the output directory exists
      #     mkdir -p lexical_features
      #     # Find CSV files in http_status and run the extractor for each
      #     for input_csv in http_status/*.csv; do
      #       if [ -f "$input_csv" ]; then
      #         echo "Processing $input_csv with lexical_feature_extractor.py"
      #         python lexical_feature_extractor.py --input-file "$input_csv" --output-dir lexical_features
      #       else
      #         echo "Warning: No CSV files found in http_status/ to process."
      #         # Optionally exit if no files found: exit 1
      #       fi
      #     done
      # - name: Upload Lexical Features
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: lexical_features
      #     path: lexical_features/
      #     if-no-files-found: warn
      # - name: Commit and push Lexical feature files
      #   env:
      #     TOKEN: ${{ secrets.MTECH }}
      #   run: |
      #     git config user.name "Ifeoluwa Oseni"
      #     git config user.email "ifeoseni@gmail.com"

      #     echo "Setting up remote with token authentication..."
      #     git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}

      #     echo "Cleaning untracked files in lexical_features/ directory..."
      #     git clean -fdx lexical_features/

      #     echo "Pulling latest changes from origin main..."
      #     git pull origin main --rebase || git pull origin main

      #     if [ -d "lexical_features/" ] && [ "$(ls -A lexical_features/)" ]; then
      #       echo "Adding lexical_features/ files to git..."
      #       git add lexical_features/
      #       if ! git diff --cached --quiet; then
      #         echo "Committing lexical feature updates..."
      #         git commit -m "Auto-update: Lexical feature extraction - $(date '+%Y-%m-%d %H:%M:%S')"

      #         echo "Pushing changes to origin main..."
      #         git push origin main || {
      #           echo "Push failed, pulling and retrying..."
      #           git pull origin main --rebase
      #           git push origin main
      #         }
      #       else
      #         echo "No changes to commit for lexical features"
      #       fi
      #     else
      #       echo "No lexical feature files to commit"
      #     fi
