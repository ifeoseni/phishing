name: Stage 1 To Run HTTP Status Code Check For 2
on:
  schedule:
    - cron: "30 22 * * *" # 22:30 UTC = 23:30 Lagos (WAT)
  workflow_dispatch:
jobs:
  run-http-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        input_file:
          - cleaned_data/PhiUSIIL_cleaned_v2.csv
          - cleaned_data/Mendeley_cleaned_v2.csv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MTECH }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create HTTP Status Output Directory
        run: mkdir -p http_status
      - name: Run HTTP Status Checker for ${{ matrix.input_file }}
        id: run_checker
        run: |
          INPUT_BASENAME=$(basename "${{ matrix.input_file }}" .csv)
          echo "Running HTTP status check for ${{ matrix.input_file }}"
          python two_http_status_checker.py --input-file "${{ matrix.input_file }}" --output-dir http_status

          # Find the actual output file (handles timestamp in filename)
          OUTPUT_FILE=$(find http_status -name "*${INPUT_BASENAME}*.csv" -type f | head -1)

          if [ -z "$OUTPUT_FILE" ]; then
            echo "Error: No output file found for ${INPUT_BASENAME}"
            exit 1
          fi

          echo "Found output file: $OUTPUT_FILE"
          echo "output_file=${OUTPUT_FILE}" >> "$GITHUB_OUTPUT"
          echo "input_basename=${INPUT_BASENAME}" >> "$GITHUB_OUTPUT"
      - name: Upload HTTP Status Features for ${{ matrix.input_file }}
        uses: actions/upload-artifact@v4
        with:
          name: http_status_features_${{ steps.run_checker.outputs.input_basename }}
          path: ${{ steps.run_checker.outputs.output_file }}
          if-no-files-found: error
      - name: Commit and Push HTTP Feature Files
        run: |
          git config user.name "Ifeoluwa Oseni"
          git config user.email "ifeoseni@gmail.com"
          git pull origin main
          git add http_status/
          git diff --cached --quiet || git commit -m "Auto-update: HTTP status features"
          git push origin main
  run-lexical-analysis:
    runs-on: ubuntu-latest
    needs: run-http-checks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MTECH }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download HTTP Status Artifacts
        uses: actions/download-artifact@v4
        with:
          path: http_status # Download all artifacts into this directory
          # Pattern matching might be needed if names are specific
          # pattern: http_status_features_*
          # merge-multiple: true # If artifacts have the same name

      - name: List downloaded files (debug)
        run: ls -R http_status

      - name: Run Lexical Feature Extraction
        run: |
          # Ensure the output directory exists
          mkdir -p lexical_features
          # Find CSV files within the downloaded artifact subdirectories and run the extractor
          # Note: download-artifact@v4 might place files in subdirs named after the artifact
          find http_status -name '*.csv' -type f | while read input_csv; do
            if [ -f "$input_csv" ]; then
              echo "Processing $input_csv with lexical_feature_extractor.py"
              python lexical_feature_extractor.py --input-file "$input_csv" --output-dir lexical_features
            else
              echo "Warning: Problem processing file $input_csv"
            fi
          done

          # Check if any output files were created
          if [ -z "$(ls -A lexical_features/*.csv 2>/dev/null)" ]; then
             echo "Warning: No lexical feature CSV files were generated."
          fi
      - name: Upload Lexical Features
        uses: actions/upload-artifact@v4
        with:
          name: lexical_features
          path: lexical_features/
          if-no-files-found: warn
      - name: Commit and Push Lexical Feature Files
        run: |
          git config user.name "Ifeoluwa Oseni"
          git config user.email "ifeoseni@gmail.com"

          # Clean untracked files in lexical_features before pulling to avoid conflicts
          echo "Cleaning untracked files in lexical_features/ directory..."
          git clean -fdx lexical_features/
          # Alternatively, if git clean is not desired: rm -rf lexical_features/*

          # Pull latest changes first to avoid conflicts
          echo "Pulling latest changes from origin main..."
          git pull origin main --rebase || git pull origin main

          # Add newly generated files if they exist
          if [ -d "lexical_features/" ] && [ "$(ls -A lexical_features/)" ]; then
            echo "Adding lexical_features/ files to git..."
            git add lexical_features/
            if ! git diff --cached --quiet; then
              echo "Committing lexical feature updates..."
              git commit -m "Auto-update: Lexical features"
              
              # Retry push with pull if it fails
              echo "Pushing changes to origin main..."
              git push origin main || {
                echo "Push failed, pulling and retrying..."
                git pull origin main --rebase
                git push origin main
              }
            else
              echo "No changes to commit for lexical features"
            fi
          else
            echo "No lexical feature files to commit"
          fi
