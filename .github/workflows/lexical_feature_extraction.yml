name: Lexical Feature Extraction (Stage 2) Workflow

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: "20 0 * * *" # Runs daily at 00:20 UTC

env:
  PYTHON_VERSION: "3.11"
  INPUT_DIR: "http_status"
  OUTPUT_DIR: "lexical_features"
  SCRIPT: "lexical_feature_extractor.py"

jobs:
  lexical-feature-extraction:
    name: Extract Lexical Features (${{ matrix.dataset }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dataset: [phiusiil, mendeley]
        include:
          - dataset: phiusiil
            input_pattern: "*PhiUSIIL*.csv"
          - dataset: mendeley
            input_pattern: "*Mendeley*.csv"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for proper git history in later steps
          token: ${{ secrets.MTECH }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip" # Enable caching for pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas tldextract
          pip list  # For debugging

      - name: Verify input directory
        run: |
          if [ ! -d "${{ env.INPUT_DIR }}" ]; then
            echo "::error::Input directory ${{ env.INPUT_DIR }} does not exist"
            exit 1
          fi

      - name: Find latest input file
        id: find-input
        run: |
          # Create output directory if it doesn't exist
          mkdir -p "${{ env.OUTPUT_DIR }}"

          # Find the most recent file matching the pattern
          LATEST_FILE=$(find "${{ env.INPUT_DIR }}" -maxdepth 1 -name "${{ matrix.input_pattern }}" -type f -printf '%T@ %p\n' | \
                        sort -n | tail -n 1 | cut -d' ' -f2-)

          if [ -z "$LATEST_FILE" ]; then
            echo "::error::No file found in ${{ env.INPUT_DIR }} matching ${{ matrix.input_pattern }}"
            exit 1
          fi

          echo "Found input file: $LATEST_FILE"
          echo "input_file=$LATEST_FILE" >> $GITHUB_OUTPUT
          echo "output_file=${{ env.OUTPUT_DIR }}/lexical_features_$(basename "$LATEST_FILE")" >> $GITHUB_OUTPUT

      - name: Run lexical feature extraction
        run: |
          echo "Running lexical feature extraction for ${{ matrix.dataset }}"
          python "${{ env.SCRIPT }}" \
            --input-file "${{ steps.find-input.outputs.input_file }}" \
            --output-dir "${{ env.OUTPUT_DIR }}"

          # Verify output file was created
          if [ ! -f "${{ steps.find-input.outputs.output_file }}" ]; then
            echo "::error::Output file was not created: ${{ steps.find-input.outputs.output_file }}"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lexical-features-${{ matrix.dataset }}-${{ github.run_number }}
          path: ${{ steps.find-input.outputs.output_file }}
          retention-days: 7

      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.MTECH }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Pull latest changes to avoid conflicts
          git pull origin main --rebase

          # Check for changes
          git add "${{ env.OUTPUT_DIR }}"

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Automated update: Lexical features for ${{ matrix.dataset }} [skip ci]"
            git push origin HEAD:main
            echo "Changes pushed successfully"
          fi

      - name: Verify results
        run: |
          echo "Verifying output file..."
          FILE="${{ steps.find-input.outputs.output_file }}"

          # Check file exists
          if [ ! -f "$FILE" ]; then
            echo "::error::Output file not found: $FILE"
            exit 1
          fi

          # Check file is not empty
          if [ ! -s "$FILE" ]; then
            echo "::error::Output file is empty: $FILE"
            exit 1
          fi

          echo "Output file looks good:"
          head -n 3 "$FILE"
